import tkinter as tk
from tkinter import messagebox
import string
import random

# Generate the password based on selected options
def generate_password():
    try:
        length = int(length_entry.get())
        if length < 4:
            messagebox.showwarning("Warning", "Password length must be at least 4")
            return
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid number")
        return

    char_pool = ''
    if uppercase_var.get():
        char_pool += string.ascii_uppercase
    if lowercase_var.get():
        char_pool += string.ascii_lowercase
    if digit_var.get():
        char_pool += string.digits
    if special_var.get():
        char_pool += string.punctuation

    if not char_pool:
        messagebox.showwarning("Warning", "Select at least one character set!")
        return

    password = ''.join(random.choice(char_pool) for _ in range(length))
    password_entry.delete(0, tk.END)
    password_entry.insert(0, password)

    # Update strength and content checks
    check_password_contents(password)

# Copy password to clipboard
def copy_to_clipboard():
    password = password_entry.get()
    if password:
        root.clipboard_clear()
        root.clipboard_append(password)
        messagebox.showinfo("Copied", "Password copied to clipboard")

# Check what character types are present in the generated password
def check_password_contents(password):
    has_upper = any(char.isupper() for char in password)
    has_lower = any(char.islower() for char in password)
    has_digit = any(char.isdigit() for char in password)
    has_special = any(char in string.punctuation for char in password)

    # Update label colors
    upper_check.config(fg="black" if has_upper else "gray")
    lower_check.config(fg="black" if has_lower else "gray")
    digit_check.config(fg="black" if has_digit else "gray")
    special_check.config(fg="black" if has_special else "gray")

    types_count = sum([has_upper, has_lower, has_digit, has_special])
    if types_count == 4:
        strength_label.config(text="Strong", fg="green")
    elif types_count == 3:
        strength_label.config(text="Medium", fg="orange")
    elif types_count == 2:
        strength_label.config(text="Weak", fg="red")
    else:
        strength_label.config(text="Very Weak", fg="red")

# Main window setup
root = tk.Tk()
root.title("Password Generator")
root.geometry("380x480")
root.resizable(False, False)
font_main = ("Segoe UI", 9)

# Password length input
tk.Label(root, text="Password Length:", font=font_main).pack(pady=(10, 0))
length_entry = tk.Entry(root, font=font_main)
# length_entry.insert(0)
length_entry.pack(pady=5)

# Option checkboxes
uppercase_var = tk.BooleanVar(value=False)
lowercase_var = tk.BooleanVar(value=False)
digit_var = tk.BooleanVar(value=False)
special_var = tk.BooleanVar(value=False)

tk.Checkbutton(root, text="Include Uppercase", variable=uppercase_var, font=font_main).pack(anchor="w", padx=30)
tk.Checkbutton(root, text="Include Lowercase", variable=lowercase_var, font=font_main).pack(anchor="w", padx=30)
tk.Checkbutton(root, text="Include Digits", variable=digit_var, font=font_main).pack(anchor="w", padx=30)
tk.Checkbutton(root, text="Include Special Characters", variable=special_var, font=font_main).pack(anchor="w", padx=30)

# Generate button
tk.Button(root, text="Generate Password", command=generate_password, font=font_main).pack(pady=10)

# Password display
tk.Label(root, text="Generated Password:", font=font_main).pack()
password_entry = tk.Entry(root, font=font_main, width=28)
password_entry.pack(pady=5)

# Copy to clipboard button
tk.Button(root, text="Copy to Clipboard", command=copy_to_clipboard, font=font_main).pack(pady=10)

# Password strength display
tk.Label(root, text="Strength:", font=font_main).pack()
strength_label = tk.Label(root, text="N/A", font=("Segoe UI", 9, "bold"))
strength_label.pack(pady=5)

# Content check section
tk.Label(root, text="Password Content Check:", font=font_main).pack(pady=(10, 0))

upper_check = tk.Label(root, text="✔ Uppercase", fg="gray", font=font_main)
upper_check.pack()

lower_check = tk.Label(root, text="✔ Lowercase", fg="gray", font=font_main)
lower_check.pack()

digit_check = tk.Label(root, text="✔ Digit", fg="gray", font=font_main)
digit_check.pack()

special_check = tk.Label(root, text="✔ Special", fg="gray", font=font_main)
special_check.pack()

# Run the app
root.mainloop()